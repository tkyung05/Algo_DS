import sys
input = sys.stdin.readline
INF = int(1e9)

v, e = map(int, input().split())  # 정점, 간선 개수

graph = [[INF] * (v + 1) for _ in range(v + 1)]  # 최단거리 그래프 2차원 배열 무한으로 초기화


# 같은 정점의 최단거리는 0으로 갱신
for i in range(1, v + 1):    
    for j in range(1, v + 1):
        if i == j:
            graph[i][j] = 0
            break

# n1과 인접한 n2의 최단거리 갱신
for _ in range(e):       
    n1, n2, dis = map(int, input().split())
    graph[n1][n2] = dis

# 플로이드 워셜 O(n^3) 알고리즘 메인 
# k번 점정을 거쳐 특정 정점으로 가는 거리와 인접한 거리의 값을 비교하여 더 작은(최단 거리)로 갱신  
for k in range(1, v + 1):
    for i in range(1, v + 1):
        for j in range(1, v + 1):
            graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]) 

# 결과 출력
for i in range(1, v + 1):
    for j in range(1, v + 1):
        if graph[i][j] == INF:
            print('INFINITY', end=' ')
        else:
            print(graph[i][j], end=' ')
    print()